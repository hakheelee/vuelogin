{"version":3,"file":"js/googlelogin.5ff4a7d9.js","mappings":"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","sources":["webpack://vueportable/./src/views/GoogleLogin.vue","webpack://vueportable/./src/views/GoogleLogin.vue?1e98"],"sourcesContent":["<template>\n    <div>\n        <!-- 구글로그인 : loginvue24 -->\n        <!-- 로그인 버튼 -->\n        <button v-if=\"!isLoggedIn\" @click=\"login\" class=\"google-button\">\n            <img src=\"@/assets/google-login.png\" alt=\"Login with Google\" class=\"google-button-img\" />\n        </button>\n        <!-- 로그아웃 버튼 -->\n        <button v-if=\"isLoggedIn\" @click=\"logout\" class=\"logout-button\">Logout</button>\n\n        <!-- 디버깅 정보 표시 -->\n        <div v-if=\"debugInfo\" class=\"debug-info\">\n            <h3>디버깅 정보:</h3>\n            <p>클라이언트 ID: {{ debugInfo.clientId }}</p>\n            <p>현재 도메인: {{ debugInfo.origin }}</p>\n            <p>현재 URL: {{ debugInfo.currentUrl }}</p>\n        </div>\n    </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue';\n\nconst oauthClientId = process.env.VUE_APP_OAUTH_CLIENT;\nconst isLoggedIn = ref(false);\nconst debugInfo = ref(null);\n\nonMounted(() => {\n    // 디버깅 정보 설정\n    debugInfo.value = {\n        clientId: oauthClientId,\n        origin: window.location.origin,\n        currentUrl: window.location.href\n    };\n\n    // Google Identity Services 스크립트 로드\n    if (!document.querySelector('script[src=\"https://accounts.google.com/gsi/client\"]')) {\n        const script = document.createElement('script');\n        script.src = 'https://accounts.google.com/gsi/client';\n        script.async = true;\n        script.defer = true;\n        document.head.appendChild(script);\n    }\n});\n\nconst login = () => {\n    console.log('=== 구글 로그인 시도 ===');\n    console.log('클라이언트 ID:', oauthClientId);\n    console.log('현재 도메인:', window.location.origin);\n    console.log('현재 URL:', window.location.href);\n\n    if (!oauthClientId) {\n        alert('OAuth 클라이언트 ID가 설정되지 않았습니다.');\n        return;\n    }\n\n    // Google Identity Services가 로드될 때까지 대기\n    const checkGoogleLoaded = () => {\n        if (window.google && window.google.accounts) {\n            console.log('Google Identity Services 로드 완료');\n            initializeGoogleLogin();\n        } else {\n            console.log('Google Identity Services 로드 대기 중...');\n            setTimeout(checkGoogleLoaded, 100);\n        }\n    };\n\n    checkGoogleLoaded();\n};\n\nconst initializeGoogleLogin = () => {\n    try {\n        // Google Identity Services 초기화\n        window.google.accounts.id.initialize({\n            client_id: oauthClientId,\n            callback: handleCredentialResponse,\n            auto_select: false,\n            cancel_on_tap_outside: false\n        });\n\n        // 로그인 프롬프트 표시\n        window.google.accounts.id.prompt((notification) => {\n            console.log('Google 로그인 알림:', notification);\n            if (notification.isNotDisplayed()) {\n                console.log('로그인 프롬프트가 표시되지 않았습니다.');\n                // 대체 방법으로 팝업 로그인 시도\n                showPopupLogin();\n            }\n        });\n    } catch (error) {\n        console.error('Google 로그인 초기화 오류:', error);\n        showPopupLogin(); // 대체 방법 시도\n    }\n};\n\nconst showPopupLogin = () => {\n    try {\n        // OAuth 2.0 팝업 로그인\n        const client = window.google.accounts.oauth2.initCodeClient({\n            client_id: oauthClientId,\n            scope: 'email profile openid',\n            ux_mode: 'popup',\n            callback: handleOAuthResponse\n        });\n\n        client.requestCode();\n    } catch (error) {\n        console.error('팝업 로그인 오류:', error);\n        alert('구글 로그인에 실패했습니다. 관리자에게 문의하세요.');\n    }\n};\n\nconst handleCredentialResponse = (response) => {\n    console.log('Google 로그인 응답:', response);\n    if (response.credential) {\n        console.log('로그인 성공!');\n        isLoggedIn.value = true;\n        alert('로그인 성공!');\n    } else {\n        console.error('로그인 실패:', response);\n        alert('로그인에 실패했습니다.');\n    }\n};\n\nconst handleOAuthResponse = (response) => {\n    console.log('OAuth 응답:', response);\n    if (response.code) {\n        console.log('OAuth 코드 수신:', response.code);\n        isLoggedIn.value = true;\n        alert('로그인 성공!');\n    } else if (response.error) {\n        console.error('OAuth 오류:', response.error);\n        alert('로그인에 실패했습니다: ' + response.error);\n    }\n};\n\nconst logout = () => {\n    console.log('로그아웃');\n    isLoggedIn.value = false;\n    if (window.google && window.google.accounts) {\n        window.google.accounts.id.disableAutoSelect();\n    }\n};\n</script>\n<style scoped>\n.google-button {\n    background: none;\n    border: none;\n    cursor: pointer;\n    padding: 0;\n}\n\n.google-button-img {\n    width: 200px; /* 버튼 이미지 크기 */\n    height: auto;\n    display: block;\n}\n\n.google-button:hover {\n    opacity: 0.9; /* 마우스 오버 시 효과 */\n}\n\n.logout-button {\n    padding: 10px 20px;\n    background-color: #4285f4;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    font-size: 16px;\n    cursor: pointer;\n}\n\n.logout-button:hover {\n    background-color: #357ae8; /* 마우스 오버 시 색상 변경 */\n}\n\n.debug-info {\n    margin-top: 20px;\n    padding: 15px;\n    background-color: #f5f5f5;\n    border-radius: 5px;\n    font-family: monospace;\n}\n\n.debug-info h3 {\n    margin-top: 0;\n    color: #333;\n}\n\n.debug-info p {\n    margin: 5px 0;\n    color: #666;\n}\n</style>\n","import script from \"./GoogleLogin.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./GoogleLogin.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./GoogleLogin.vue?vue&type=style&index=0&id=f29f6f06&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-f29f6f06\"]])\n\nexport default __exports__"],"names":["oauthClientId","process","isLoggedIn","ref","debugInfo","onMounted","value","clientId","origin","window","location","currentUrl","href","document","querySelector","script","createElement","src","async","defer","head","appendChild","login","console","log","alert","checkGoogleLoaded","google","accounts","initializeGoogleLogin","setTimeout","id","initialize","client_id","callback","handleCredentialResponse","auto_select","cancel_on_tap_outside","prompt","notification","isNotDisplayed","showPopupLogin","error","client","oauth2","initCodeClient","scope","ux_mode","handleOAuthResponse","requestCode","response","credential","code","logout","disableAutoSelect","_createElementBlock","onClick","class","_createElementVNode","_imports_0","alt","_hoisted_1","_toDisplayString","__exports__"],"sourceRoot":""}